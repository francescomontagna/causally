Usage
=====

.. _installation:

Installation
------------

.. What about git clone + pip install . until the library is not completely ready?
To use Causally, first install it using pip:

.. code-block:: console

   $ pip install causally


Graph generation
----------------
Structural causal models are associated to a causal graph. Causally supports three models for random
network generation:

* *Erdos-Renyi*: generates directed acyclic graphs by randomly connecting pair of nodes. 

* *Barabasi-Albert*: generates directed acyclic graphs by randomly connecting pair of nodes according to 
a preferential attachment schema. Nodes with higher degree are more likely to be assigned a new edge.
Scale-free graphs models the presence of *hubs* in the graph.

* *Gaussian Random Partition*: generates directed acyclic graph by sparsely connecting multiple *Erdos-Renyi*
clusters together. 

.. code-block:: python
   
   from causally.datasets import random_graphs

   graph_generator = random_graphs.ErdosRenyi(
      num_nodes=10,
      p_edge=0.4
   )
   adjacency = graph_generator.get_random_graph()


Causal mechanisms
-----------------

Structural causal models supports several function for random generation of the causal mechanisms.

* *Linear mechanisms*: generate a linear combination of the input observations. 

* *Nonlinear mechanisms*: generate a linear combination of the input observations. The nonlinear function
can be parametrized by a random neural network, or sampled as a Gaussian process with covariance
defined with the kernel matrix of the parents.

.. code-block:: python
   
   from causally.datasets import causal_mechanisms as cm

   mechanism = cm.NeuralNetMechanism()
   parents = np.random.standard_normal(size=(1000, 2)) # 1000 samples, 2 parents
   child = mechanism.predict(parents)

Custom definition of causal mechanisms is as simple as implementing the class :py:class:`PredictionModel`
and the abstract method :py:func:`predict()`.

.. code-block:: python

   import numpy as np
   from causally.datasets.causal_mechanisms import PredictionModel

   class SumOfSquares(PredictionModel):
      def predict(self, X):
         effect = np.square(X).sum(axis=1)
         return effect

   mechanism = SumOfSquares()
   parents = np.random.standard_normal(size=(1000, 2)) # 1000 samples, 2 parents
   child = mechanism.predict(parents) 


Noise terms
-----------

Causally allows specifying the distribution of the structural causal model exogenous random variables.
Probability distributions are specified by implementing the class :py:class:`Distribution`
and the abstract method :py:func:`sample()`. Additionally, samples can be generated as nonlinear 
transformations of a standard normal: this is achieved implementing :py:class:`RandomNoiseDistribution`
and the abstract method :py:func:`sample()`. Checkout the class :py:class:`MLPNoise`
for noise terms generated by a nonlinar transformation foa  gaussian normal with a random neural network.

.. code-block:: python

   import numpy as np
   from torch import nn
   from datasets.random_noises import Distribution, MLPNoise

   # Generate samples from an exponential distribution
   class Exponential(Distribution):
   def __init__(self, scale: float=1.0):
      self.scale = scale

   def sample(self, size: tuple[int]):
      return np.random.exponential(self.scale, size)

   exp_generator = Exponential()
   exp_samples = exp_generator.sample((1000, ))


   # Generate samples from a random distribution
   mlp_generator = MLPNoise(
      hidden_units=100, 
      activation=nn.Sigmoid(), 
      bias=False, 
   )
   mlp_samples = mlp_generator.sample()


Structural causal models
------------------------

Causally supports the generation of structural causal models with linear and nonlinar mechanisms, and predefines classes
for generation according to the following common SCMs:

* Linear model: causal model with linear mechanisms and additive noise terms. 
   .. math:: 
      X_i := sum_{k \in \operatorname{PA_i}}w_kX_k + N_i
where :math:`\operatorname{PA_i}` denotes the set of parents of the node :math:`X_i`, and :math:`N_i` 
the exogenous random variable for :math:`X_i`.

* Nonlinear additive noise model: causal model with nonlinear mechanisms and additive noise terms.

   .. math:: 
      X_i := f_i(\operatorname{PA_i}) + N_i
where :math:`f_i` is the nonlinear causal mechanism.

* Post-nonlinar model: causal model with invertible funciton applied to the output of a 
nonlinear additive noise model structural equation.

   .. math:: 
      X_i := g_i(f_i(\operatorname{PA_i}) + N_i)
where :math:`g_i` is an invertible function.


In order to generate data from a causal model, we need to instantiate the followings:

* A ``GraphGenerator``, e.g. py:class:`ErdosRenyi`. The class instance contains specifications
for the graph generation

* A 


SCM assumptions
---------------
.. Need to add SCM properties stuff!